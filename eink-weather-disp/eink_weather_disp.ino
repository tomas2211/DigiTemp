#include "Arduino.h"
#include "epd2in9.h"
#include "epdpaint.h"
#include "DialogInput_bold_16.h"

#include <SPI.h>

const uint8_t icon[] PROGMEM = {
        0,   0,   0, 192,   0,   0,   0,   0,   0,  48,   0,   0,   0,
        0,   0,  12,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,
        0,   0, 192,   0,   0,   0,   0,   0,  48,   0,   0,   0,  48,
        0,  12,   0,   3,   0,  14,   0,   0,   0,   1, 192,   1, 192,
        0,   0,   0, 224,   0,  56,   0,   0,   0, 112,   0,   7,   0,
        0,   0,  56,   0,   0, 192,   7, 128,  12,   0,   0,  16,  15,
        252,   0,   0,   0,   0,  15, 255, 192,   0,   0,   0,  15,   0,
        60,   0,   0,   0,   7, 128,   7, 128,   0,   0,   3, 128,   0,
        112,   0,   0,   0, 192,   0,  12,   0,   0,   0, 112,   0,   3,
        128,   0,   0,  24,   0,   0,  96,   0,   0,  12,   0,   0,  12,
        0,   0,   3,   0,   0,   3,   0,   0,   0, 192,   0,   0, 192,
        0,   0, 112,   0,   0,  56,   0, 254,  28,   0,   0,  14,  31,
        255, 135,   0,   0,   3, 135, 240,   1, 192,   0,   0, 224,   0,
        0,  48,   0,   0,  48,   0,   0,  12,   0,   0,  12,   0,   0,
        3,   0,   0,   3,   0,   0,   0,  96,   0,   1, 128,   0,   0,
        28,   0,   0, 224,   0,   0,   3,   0,   0,  48,   0,   0,   0,
        224,   0,  28,   0,   0,   0,  30,   0,  30,   0,   0,   0,   3,
        192,  15,   0,   0,   0,   0,  63, 255,   0,   0,   0,   4,   3,
        255,   0,   0,   0,   3,   0,  30,   0,  48,   0,   1, 192,   0,
        0,  14,   0,   0, 224,   0,   0,   1, 192,   0, 112,   0,   0,
        0,  56,   0,  56,   0,   0,   0,   7,   0,  12,   0,   3,   0,
        0, 192,   0,   0,   0, 192,   0,   0,   0,   0,   0,  48,   0,
        0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   3,   0,   0,
        0,   0,   0,   0, 192,   0,   0,   0,   0,   0,  48,   0,   0,
        0
};

const uint8_t moon[] PROGMEM = {
        0xff, 0xa0, 0x10, 0xff, 0xff, 0xa0, 0x20, 0xff, 0xff, 0xa0, 0x20, 0xff, 0xff, 0xa0, 0x20, 0xff, 0xff, 0x60, 0xb0, 0xff, 0xff, 0x10, 0xb0, 0xff, 0xff, 0x20, 0x90, 0xff, 0xff, 0x50, 0x50, 0xff, 0xff, 0x70, 0x50, 0xff, 0xff, 0x60, 0x70, 0xff, 0xff, 0x50, 0x20, 0x10, 0x20, 0xff, 0xff, 0x50, 0x10, 0x20, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x10, 0xff, 0xff, 0xb0, 0x20, 0xff, 0xff, 0xa0, 0x20, 0xff, 0xff, 0xa0, 0x20, 0xff, 0xff, 0x90, 0x30, 0xf8, 0x03, 0x0f, 0xf7, 0x0b, 0x0f, 0x10, 0x60, 0xff, 0x70, 0xb0, 0xf0, 0x70, 0xff, 0x80, 0x90, 0xe0, 0x90, 0xff, 0xc0, 0x20, 0xf1, 0x04, 0x01, 0x02, 0x0f, 0xfd, 0x02, 0x0e, 0x05, 0x02, 0x02, 0x0f, 0xfd, 0x02, 0x0d, 0x04, 0x04, 0x02, 0x0f, 0xfd, 0x01, 0x0d, 0x04, 0x05, 0x02, 0x0f, 0xff, 0xe0, 0x30, 0x60, 0x20, 0xff, 0xfd, 0x03, 0x06, 0x02, 0x0f, 0x30, 0x10, 0xff, 0x70, 0x30, 0x70, 0x20, 0xf2, 0x02, 0x0f, 0xf6, 0x03, 0x08, 0x02, 0x0f, 0x20, 0x20, 0xff, 0x60, 0x20, 0x90, 0x20, 0xf2, 0x02, 0x0f, 0xf5, 0x03, 0x09, 0x02, 0x0e, 0x09, 0x0f, 0xf1, 0x02, 0x0b, 0x02, 0x0c, 0x0b, 0x0f, 0xe0, 0x20, 0xc0, 0x20, 0xc0, 0xb0, 0xfe, 0x02, 0x0c, 0x02, 0x0f, 0x10, 0x30, 0xff, 0x20, 0x30, 0xc0, 0x20, 0xf1, 0x02, 0x0f, 0xf3, 0x02, 0x0d, 0x03, 0x0f, 0x02, 0x0f, 0xf3, 0x02, 0x0e, 0x02, 0x0f, 0x02, 0x0f, 0xf2, 0x03, 0x0e, 0x02, 0x0f, 0x10, 0x10, 0xff, 0x20, 0x20, 0xf0, 0x30, 0xff, 0xf5, 0x02, 0x0f, 0x10, 0x20, 0xff, 0xf5, 0x02, 0x0f, 0x10, 0x30, 0xff, 0xa0, 0x10, 0x60, 0x20, 0xf2, 0x02, 0x0f, 0xf9, 0x03, 0x05, 0x02, 0x0f, 0x20, 0x30, 0xff, 0x80, 0x30, 0x50, 0x20, 0xf3, 0x03, 0x0f, 0xf4, 0x01, 0x00, 0x30, 0x10, 0x10, 0x10, 0x20, 0xf4, 0x03, 0x0f, 0xf2, 0x0b, 0x01, 0x02, 0x0f, 0x50, 0x30, 0xff, 0x10, 0xb0, 0x10, 0x20, 0xf5, 0x04, 0x0f, 0xf2, 0x07, 0x03, 0x02, 0x0f, 0x60, 0x40, 0xff, 0x20, 0x50, 0x40, 0x20, 0xf7, 0x04, 0x0f, 0xf1, 0x06, 0x03, 0x02, 0x0f, 0x80, 0x50, 0xfd, 0x03, 0x00, 0x20, 0x40, 0x20, 0xf9, 0x04, 0x0f, 0xc0, 0x20, 0x10, 0x20, 0x40, 0x20, 0xfa, 0x06, 0x0f, 0x90, 0x10, 0x30, 0x10, 0x40, 0x20, 0xfc, 0x07, 0x0b, 0x02, 0x0f, 0x50, 0x20, 0xfd, 0x0f, 0x50, 0xf5, 0x02, 0x0f, 0xf0, 0xf3, 0x0f, 0x50, 0x30, 0xff, 0x30, 0xe0, 0xf6, 0x02, 0x0f, 0xfe, 0x02, 0x0f, 0x70, 0x30, 0xff, 0xc0, 0x20, 0xf9, 0x03, 0x0f, 0xfa, 0x03, 0x0f, 0xa0, 0x20, 0xff, 0x90, 0x30, 0xfb, 0x03, 0x0f, 0xf8, 0x03, 0x0f, 0xc0, 0x30, 0xff, 0x60, 0x30, 0xfe, 0x03, 0x0f, 0xf4, 0x03, 0x0f, 0xf1, 0x04, 0x0f, 0xf0, 0x40, 0xff, 0x30, 0x40, 0xfd, 0x04, 0x0f, 0xf5, 0x05, 0x0f, 0x90, 0x50, 0xff, 0x80, 0x40, 0xf6, 0x05, 0x0f, 0xfb, 0x06, 0x0f, 0x10, 0x60, 0xff, 0xe0, 0x80, 0x80, 0x80, 0xff, 0xf3, 0x0f, 0x70, 0xff, 0xf7, 0x0f, 0x30, 0xff, 0xfd, 0x0a, 0x0f, 0xff
};

const uint8_t saturn[] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0c, 0x0f, 0xff, 0xc0, 0xf4, 0x0f, 0xff, 0x60, 0xf8, 0x0f, 0xff, 0x20, 0xb0, 0x60, 0x80, 0xd0, 0x10, 0xfc, 0x06, 0x03, 0x02, 0x0a, 0x06, 0x05, 0x0b, 0x0f, 0x70, 0x50, 0x50, 0x20, 0xa0, 0x70, 0x10, 0xf0, 0xf4, 0x05, 0x07, 0x03, 0x09, 0x02, 0x00, 0xf7, 0x0f, 0x20, 0x40, 0xa0, 0x30, 0x70, 0x30, 0x10, 0x90, 0x80, 0x20, 0xf1, 0x04, 0x0b, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0b, 0x02, 0x0f, 0x04, 0x0d, 0x0c, 0x06, 0x03, 0x0b, 0x02, 0x0f, 0x03, 0x0f, 0x0a, 0x08, 0x03, 0x09, 0x03, 0x0e, 0x03, 0x0f, 0x30, 0x60, 0xb0, 0x30, 0x80, 0x20, 0xe0, 0x30, 0xff, 0x90, 0x30, 0x60, 0x30, 0xe0, 0x20, 0x50, 0x40, 0xff, 0x02, 0x05, 0x03, 0x0e, 0x03, 0x03, 0x07, 0x0f, 0xe0, 0x30, 0x40, 0x30, 0xd0, 0x30, 0x40, 0x80, 0xfe, 0x02, 0x03, 0x03, 0x0e, 0x02, 0x04, 0x03, 0x02, 0x02, 0x0f, 0xe0, 0x30, 0x10, 0x30, 0xe0, 0x30, 0x40, 0x20, 0x30, 0x20, 0xff, 0x07, 0x0f, 0x02, 0x05, 0x02, 0x03, 0x02, 0x0f, 0xf0, 0x60, 0xf1, 0x02, 0x05, 0x03, 0x01, 0x03, 0x0f, 0xf1, 0x04, 0x0f, 0x10, 0x30, 0x60, 0x80, 0xff, 0x10, 0x30, 0xf2, 0x02, 0x07, 0x07, 0x0f, 0xf1, 0x04, 0x0f, 0x20, 0x20, 0x90, 0x40, 0xf2, 0x05, 0x06, 0x06, 0x0f, 0x20, 0x20, 0xff, 0x09, 0x03, 0x07, 0x0f, 0x10, 0x30, 0xfe, 0x0b, 0x01, 0x04, 0x00, 0x20, 0xf1, 0x03, 0x0f, 0xd0, 0x40, 0x30, 0x90, 0x10, 0x30, 0xf0, 0x20, 0xfd, 0x03, 0x07, 0x05, 0x03, 0x03, 0x0f, 0x02, 0x0f, 0xd0, 0x20, 0x80, 0x40, 0x50, 0x20, 0xf0, 0x20, 0xfc, 0x03, 0x09, 0x02, 0x06, 0x02, 0x0f, 0x02, 0x0f, 0xc0, 0x20, 0xa0, 0x30, 0x50, 0x20, 0xf0, 0x20, 0xfc, 0x02, 0x0a, 0x03, 0x04, 0x03, 0x0f, 0x02, 0x0f, 0xc0, 0x20, 0xa0, 0x30, 0x40, 0x30, 0xf0, 0x30, 0xfb, 0x02, 0x0a, 0x02, 0x05, 0x03, 0x0e, 0x04, 0x0f, 0xc0, 0x20, 0x90, 0x20, 0x50, 0x20, 0xe0, 0x50, 0xfb, 0x04, 0x07, 0x03, 0x05, 0x02, 0x0d, 0x06, 0x0f, 0xa0, 0x60, 0x50, 0x30, 0x60, 0x20, 0xc0, 0x30, 0x02, 0x0f, 0x80, 0xa0, 0x10, 0x50, 0x50, 0x30, 0xb0, 0x30, 0x10, 0x30, 0xf5, 0x06, 0x00, 0xb0, 0x60, 0x20, 0xb0, 0x30, 0x30, 0x20, 0xf3, 0x06, 0x03, 0x08, 0x08, 0x02, 0x0a, 0x03, 0x04, 0x03, 0x0f, 0x06, 0x08, 0x03, 0x09, 0x03, 0x0a, 0x03, 0x05, 0x02, 0x0d, 0x06, 0x0f, 0x90, 0x20, 0xa0, 0x30, 0x60, 0x30, 0xa0, 0x60, 0xfa, 0x03, 0x0a, 0x02, 0x07, 0x03, 0x08, 0x06, 0x0f, 0xc0, 0x20, 0xa0, 0x30, 0x80, 0x30, 0x50, 0x60, 0xfd, 0x03, 0x0a, 0x02, 0x0a, 0x02, 0x02, 0x07, 0x0f, 0xf0, 0x20, 0xb0, 0x20, 0xa0, 0xb0, 0xff, 0x10, 0x30, 0xb0, 0x20, 0xa0, 0x90, 0xc0, 0x50, 0xd0, 0x30, 0xc0, 0x40, 0x30, 0xb0, 0xd0, 0x90, 0xa0, 0x30, 0xe0, 0xf4, 0x0c, 0x0b, 0x08, 0x03, 0x0f, 0x10, 0xc0, 0x10, 0x40, 0xa0, 0x30, 0x40, 0x40, 0x60, 0x30, 0xf4, 0x05, 0x08, 0x03, 0x08, 0x03, 0x07, 0x02, 0x04, 0x04, 0x0f, 0xf6, 0x04, 0x06, 0x02, 0x08, 0x03, 0x02, 0x04, 0x0f, 0xf8, 0x05, 0x03, 0x03, 0x09, 0x02, 0x00, 0x50, 0xff, 0xa0, 0x60, 0x10, 0x20, 0xa0, 0x80, 0xff, 0xd0, 0x90, 0x80, 0x80, 0xff, 0xf2, 0x0f, 0x80, 0xff, 0xf6, 0x0f, 0x40, 0xff, 0xfc, 0x0b, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};

const uint8_t mist[] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x70, 0x0d, 0x01, 0x0d, 0x01, 0x0d, 0x01, 0x0c, 0x02, 0x07, 0x03, 0x09, 0x06, 0x08, 0x05, 0x09, 0x05, 0x08, 0x06, 0x05, 0x04, 0x07, 0x08, 0x05, 0x09, 0x05, 0x09, 0x05, 0x09, 0x04, 0x05, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0c, 0x03, 0x0c, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0a, 0x05, 0x04, 0x04, 0x09, 0x06, 0x08, 0x05, 0x08, 0x06, 0x08, 0x07, 0x04, 0x05, 0x06, 0x08, 0x05, 0x09, 0x05, 0x09, 0x05, 0x0a, 0x02, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0xd0, 0x10, 0xd0, 0x10, 0xd0, 0x10, 0xd0, 0x10, 0x70, 0x30, 0x90, 0x60, 0x80, 0x50, 0x90, 0x50, 0x80, 0x60, 0x50, 0x40, 0x70, 0x80, 0x60, 0x80, 0x50, 0x80, 0x60, 0x90, 0x40, 0x50, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xc0, 0x30, 0xc0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0x50, 0x40, 0x90, 0x60, 0x80, 0x50, 0x80, 0x60, 0x80, 0x70, 0x40, 0x50, 0x60, 0x80, 0x50, 0x90, 0x50, 0x90, 0x50, 0xa0, 0x20, 0x80, 0x0e, 0x00, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x0e, 0x00, 0xe0, 0x0d, 0x00, 0xe0, 0x08, 0x03, 0x09, 0x06, 0x08, 0x05, 0x09, 0x05, 0x08, 0x06, 0x05, 0x04, 0x07, 0x08, 0x06, 0x08, 0x05, 0x08, 0x06, 0x09, 0x04, 0x05, 0x04, 0x0a, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0c, 0x03, 0x0c, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x05, 0x04, 0x09, 0x06, 0x08, 0x05, 0x09, 0x05, 0x08, 0x07, 0x04, 0x05, 0x06, 0x08, 0x05, 0x09, 0x05, 0x09, 0x05, 0x09, 0x03, 0x08, 0x00, 0xd0, 0x10, 0xd0, 0x10, 0xd0, 0x0e, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xe0, 0x0f, 0xe0, 0x0e, 0x00, 0x80, 0x20, 0xa0, 0x50, 0x90, 0x50, 0x90, 0x50, 0x80, 0x60, 0x50, 0x40, 0x70, 0x80, 0x60, 0x80, 0x50, 0x80, 0x60, 0x90, 0x40, 0x50, 0x40, 0xa0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xc0, 0x30, 0xc0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0x50, 0x40, 0x90, 0x60, 0x80, 0x50, 0x90, 0x50, 0x80, 0x70, 0x40, 0x50, 0x60, 0x80, 0x50, 0x90, 0x50, 0x80, 0x60, 0x90, 0x30, 0x80, 0x0d, 0x01, 0x0d, 0x01, 0x0d, 0x00, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x02, 0x0a, 0x05, 0x09, 0x05, 0x09, 0x05, 0x09, 0x05, 0x05, 0x04, 0x07, 0x08, 0x06, 0x08, 0x05, 0x08, 0x06, 0x09, 0x04, 0x05, 0x04, 0x0a, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0c, 0x03, 0x0c, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x05, 0x04, 0x09, 0x06, 0x08, 0x05, 0x09, 0x05, 0x08, 0x07, 0x04, 0x05, 0x06, 0x08, 0x06, 0x08, 0x05, 0x08, 0x06, 0x09, 0x03, 0x07, 0x02, 0x0c, 0x01, 0x0d, 0x01, 0x0d, 0x01, 0x0d, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};



// Eink defines
unsigned char image[1024]; // image buffer
Paint paint(image, 0, 0);    // width should be the multiple of 8
Epd epd;
unsigned long time_start_ms;
unsigned long time_now_s;



void setup() {
    // put your setup code here, to run once:
    Serial.begin(9600);

    if (epd.Init(lut_full_update) != 0) {
        Serial.print("e-Paper init failed");
        return;
    }

    /**
     *  there are 2 memory areas embedded in the e-paper display
     *  and once the display is refreshed, the memory area will be auto-toggled,
     *  i.e. the next action of SetFrameMemory will set the other memory area
     *  therefore you have to clear the frame memory twice.
     */
    epd.ClearFrameMemory(0xFF);   // bit set = white, bit reset = black
    epd.DisplayFrame();
    epd.ClearFrameMemory(0xFF);   // bit set = white, bit reset = black
    epd.DisplayFrame();

    if (epd.Init(lut_partial_update) != 0) {
        Serial.print("e-Paper init failed");
        return;
    }

    time_start_ms = millis();
}

void loop() {
    paint.SetWidth(74);
    paint.SetHeight(74);
    paint.SetRotate(ROTATE_90);

    paint.Clear(1);
//    paint.setTextColor(1);
//    paint.setFont(&DialogInput_bold_16);
//    paint.setCursor(0, 0);
//    paint.DrawStringAt(0, 4, time_string, &Font24, COLORED);
//    paint.print(millis());
//    paint.setCursor(0, 30);
//    paint.print("  Hello world!");
//    paint.DrawCharAt(0,4,'a', &Open_Sans_Regular_10, COLORED);
//    paint.DrawCharAt(12,4,'h', &Open_Sans_Regular_10, COLORED);
//    paint.PutBMPAt(0,0,50,50, icon, false);
    paint.PutBMP4bitCompAt(0, 0, 74, 74, moon, false);
    epd.SetFrameMemory(paint.GetImage(), 128-74, 0, paint.GetWidth(), paint.GetHeight());
    paint.PutBMP4bitCompAt(0, 0, 74, 74, mist, false);
    epd.SetFrameMemory(paint.GetImage(), 128-74, 74, paint.GetWidth(), paint.GetHeight());
    epd.SetFrameMemory(paint.GetImage(), 128-74, 148, paint.GetWidth(), paint.GetHeight());
    paint.PutBMP4bitCompAt(0, 0, 74, 74, saturn, false);
    epd.SetFrameMemory(paint.GetImage(), 128-74, 222, paint.GetWidth(), paint.GetHeight());
    epd.DisplayFrame();

    delay(1000);
}